//
//  UIView.swift
//  Wave Mobile Challenge
//
//  Created by Artur Shinkevich on 2017-04-20.
//  Copyright Â© 2017 ashinkevich. All rights reserved.
//

import Foundation
import UIKit
import QuartzCore

/// Computed properties, based on the backing CALayer property, that are visible in Interface Builder.
extension UIView {

	var absoluteFrame: CGRect {
		if let parentView = self.superview {
			return parentView.convert(self.frame, to: nil)
		}

		return self.frame
	}

	/// When positive, the background of the layer will be drawn with rounded corners. Also effects the mask generated by the `masksToBounds' property. Defaults to zero. Animatable.
	@IBInspectable var cornerRadius: Double {
		get {
			return Double(self.layer.cornerRadius)
		}
		set {
			self.layer.cornerRadius = CGFloat(newValue)
		}
	}

	/// The width of the layer's border, inset from the layer bounds. The border is composited above the layer's content and sublayers and includes the effects of the `cornerRadius' property. Defaults to zero. Animatable.
	@IBInspectable var borderWidth: Double {
		get {
			return Double(self.layer.borderWidth)
		}
		set {
			self.layer.borderWidth = CGFloat(newValue)
		}
	}

	/// The color of the layer's border. Defaults to opaque black. Colors created from tiled patterns are supported. Animatable.
	@IBInspectable var borderColor: UIColor? {
		get {
			return UIColor(cgColor: self.layer.borderColor!)
		}
		set {
			self.layer.borderColor = newValue?.cgColor
		}
	}

	/// The color of the shadow. Defaults to opaque black. Colors created from patterns are currently NOT supported. Animatable.
	@IBInspectable var shadowColor: UIColor? {
		get {
			return UIColor(cgColor: self.layer.shadowColor!)
		}
		set {
			self.layer.shadowColor = newValue?.cgColor
		}
	}

	/// The opacity of the shadow. Defaults to 0. Specifying a value outside the [0,1] range will give undefined results. Animatable.
	@IBInspectable var shadowOpacity: Float {
		get {
			return self.layer.shadowOpacity
		}
		set {
			self.layer.shadowOpacity = newValue
		}
	}

	/// The shadow offset. Defaults to (0, -3). Animatable.
	@IBInspectable var shadowOffset: CGSize {
		get {
			return self.layer.shadowOffset
		}
		set {
			self.layer.shadowOffset = newValue
		}
	}

	/// The blur radius used to create the shadow. Defaults to 3. Animatable.
	@IBInspectable var shadowRadius: Double {
		get {
			return Double(self.layer.shadowRadius)
		}
		set {
			self.layer.shadowRadius = CGFloat(newValue)
		}
	}
}
